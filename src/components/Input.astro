---
export interface Props {
  id: string;
  placeholder?: string;
  isBordered?: boolean;
  errorColor?: "red" | "white";
}

const { id, placeholder, isBordered = true, errorColor = "red" } = Astro.props;
---

<label
  for={id}
  class:list={[
    "input-wrapper",
    { bordered: isBordered, "error-white": errorColor === "white" },
  ]}
  data-error=""
>
  <input type="text" id={id} placeholder={placeholder} />
</label>

<script define:vars={{ id: id }}>
  let error = "";
  const input = document.getElementById(id);
  const label = document.querySelector(`[for=${id}]`);
  const validate = () => {
    let emailFormat = new RegExp(
      "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-z]{2,3}"
    );
    emailFormat.test(input.value)
      ? (error = "")
      : (error = "Please enter a valid Email address.");
    label.setAttribute("data-error", error);
  };
  input.addEventListener("change", validate);
</script>

<style>
   {
    display: block;
  }
  .input-wrapper > input {
    display: block;
    width: 100%;
    color: var(--text-body);
    font-size: 1rem;
    caret-color: var(--text-accent);
    background-color: var(--white-1);
    color: var(--text-body);
    border: 0;
    border-radius: 0.25rem;
    padding: 0.5rem 1rem;
  }
  .input-wrapper:is(.bordered) > input {
    border: 0.0625rem solid var(--dark-blue);
  }
  .input-wrapper > input:focus-visible {
    border-color: var(--text-accent);
    outline: transparent;
  }
  .input-wrapper::after {
    content: attr(data-error);
    display: block;
    color: var(--text-error);
  }
  .input-wrapper:is(.error-white)::after {
    --text-error: var(--white-2);
  }
</style>
